// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DB_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    resumes       Resume[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Resume {
    id         String          @id @default(cuid())
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
    userId     String
    user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    title      String
    resumeUrl  String
    rawContent String          @db.Text
    sections   ResumeSection[]
    video      Video?

    @@index([userId])
}

model ResumeSection {
    id       String @id @default(cuid())
    resumeId String
    resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    type     String // e.g., "education", "experience", "skills"
    title    String
    content  String @db.Text
    order    Int

    @@index([resumeId])
}

model Video {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    resumeId     String   @unique
    resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    status       String // "pending", "processing", "completed", "failed"
    videoUrl     String?
    subtitlesUrl String?
    duration     Int? // in seconds
    aiScript     String?  @db.Text // AI generated script for the video
    errorMessage String?  @db.Text

    @@index([resumeId])
}
